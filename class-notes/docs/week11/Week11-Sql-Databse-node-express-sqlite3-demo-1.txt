## Introduction to SQL
- https://www.w3schools.com/sql/

##  nodejs sqlite3 CRUD examples 
- https://coderslegacy.com/javascript-sqlite3-tutorial-for-beginners-node-js/
- https://medium.com/swlh/creating-a-crud-application-using-node-js-and-sqlite3-a57d4a39ab69
- https://sqldocs.org/sqlite/sqlite-nodejs/
- https://www.sqliz.com/posts/javascript-crud-sqlite/

## Introduction to SQL
- https://www.w3schools.com/sql/
- Database = file containing structured data ie: table/schema, rows, columns
- SQL is a standard language for storing, manipulating and retrieving data in databases.
- SQL - universal/common language/code used to manipulate or retrieve data from a database.
- Our SQL tutorial will teach you how to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.

## SQLite = portable text based full featured database

## Structured query language 
- Create a database to store data
- create a table structure to save data
- add, update, delete data using sql command
- RDBMS - relational management system
- data can be related and joined
- ie: MySql, Postgressql, Oracle, Sql Server, Other
- sqlite - full-featured portable sql text-based database	

## SQLite = portable text based full featured database
- download/install sqlite db browser
- https://sqlitebrowser.org/dl/
-** windows: **
-** DB Browser for SQLite - Standard installer for 64-bit Windows **

<pre>
<xmp>

--------------------------------------
DEMO SQL Db Browser db #1
--------------------------------------
-- create database "demodb1"
-- save sqlite db browser session
-- create new query tabs
-- rename query tabs
-- copy and use sqlite database to application

## Database  Create table Summary 
- table name: contact
- fields
-  Type - number, string, blob/object
-  NN - Not null, must not be null
-  PK - Primary key - key can not be duplicate , primary key is also unique
-       used as default data sorting
-  AI - Auto increment
-  U - unique - does not be duplicate , primary key is also unique
-  Default - add defult value when field is empty
-  Check - additional sql field validation

* create table "user"
  field:
    id        int nn pk un
    username  text nn
    password  text nn

* insert data

* query data
 
  select id, name, password
  from user
  ;

  select *
  from user
  limit 2
  ;
 

---------------------------------------
Database example #2: demo2.db
---------------------------------------
-- create database "demodb1"
-- save sqlite db browser session
-- create new query tabs
-- rename query tabs
-- copy and use sqlite database to application

CREATE TABLE "user" (
"id" INTEGER NOT NULL UNIQUE,
"username" TEXT NOT NULL UNIQUE,
"password" TEXT NOT NULL,
PRIMARY KEY("id" AUTOINCREMENT)
);

-----------------------------------------
SQL Example 
-----------------------------------------

SELECT *
FROM user
;

SELECT id, username, password
FROM user
LIMIT 2
;

SELECT id, username, password
FROM user
WHERE username = "user1" and password = "pwd1"
;

INSERT INTO User(username,password)
VALUES ("user1","pwd1")
;

DELETE
FROM User
WHERE username = "userone"
;

=================================================
- Class exercise demo - create dashboard database 
=================================================

#SQL Query demo #1
- create a database ie: dasbboard
- create table : user 
  - id integer not null autoincrement unique primary key
  - username text not null unique  
  - password text not null 

<pre>
<xmp>
CREATE TABLE "user" (
	"id"	INTEGER NOT NULL UNIQUE,
	"username"	TEXT NOT NULL UNIQUE,
	"password"	TEXT NOT NULL,
	PRIMARY KEY("id" AUTOINCREMENT)
);
</xmp>
</pre>

### Query data - ie: login page 
  - sql code - select , where and 

<pre>
<xmp>
/*
sql demo #1 - get all users 
- display all columns 
- display all rows 
 note: not reccomended ie: 1mil+ rows, quiry timeout
*/
select *
from user

---------------------------

/*
sql demo #2 - get all users 
- display all columns 
- display all rows 
 note: not reccomended ie: 1mil+ rows, quiry timeout
 use limit [number of rows]
 */
select *
from user
limit 10

---------------------------

/*
sql demo #3 - get all users 
- display username and password
- display all rows 
 note: not reccomended ie: 1mil+ rows, quiry timeout
 use limit [number of rows]
 */
select username, password
from user
limit 10


-------------------------

/*
sql demo #4 - get all users ie: login page 
- display username and password
- display specified username and pasword
 note: not reccomended ie: 1mil+ rows, quiry timeout
 use limit [number of rows]
 */
select username, password
from user
where username = "userone"
and password = "pwd1"
limit 10

--------------------------------


</xmp>
</pre>

### add sampe data - ui and sql code - ie: register page
  - insert new data - ui and sql code
  - insert into 

<pre>
<xmp>
</xmp>
</pre>

### review sql update, delete 


<pre>
<xmp>
/*
display all users
select/retrieve all columns
select/retrieve all rows
*/
select *
from user

------------------------------

/*
display all users
select/retrieve username, password
select/retrieve all rows
*/
select username, password
from user
;

------------------------------

/*
display all users
select/retrieve username, password
select/retrieve a specified row
*/
select username, password, updateddate
from user
where username = "userone"
and password = "pwd1"
;



------------------------------


------------------------------


</xmp>
</pre>

=================================================
product CRUD example #2
=================================================

product
 id    primary key
 name  string not null
 date  string null
 price numeric not null


name, date, price
item1, 5/1/21, 112.32
item2, 1/5/21, 312.42
itema, 1/20/22, 89.36
itemb, 12/5/23, 238.23
itemc, 8/10/23, 73.2
itemd, 11/10/24, 52.36

-----------------------------
SQL Queries
-----------------------------
- create table 
= add update delete data
- query data

SELECT
WHERE
LIMIT

INSERT
UPDATE
DELETE


=================================================
= contact table CRUD example #4
=================================================

---------------------------
create table SQL code
---------------------------

CREATE TABLE "contact" (
  "id"  INTEGER NOT NULL UNIQUE,
  "name"  TEXT NOT NULL,
  "email" TEXT NOT NULL,
  "phone" TEXT,
  PRIMARY KEY("id" AUTOINCREMENT)
);


name    email   	phone
ann     ann@gmail.com   23923234 
sam     sam@yahoo.com  
jan     jan@msn.com     19382933 
ken     ken@yahoo.com   78349348 
jon     jon@gmail.com     
pam     pam@msn.com     32978324 

-----------------------------
SQL Queries
-----------------------------
- create table 
= add update delete data
- query data

SELECT
WHERE
LIMIT

INSERT
UPDATE
DELETE

OTHER


### Sqlitdb browser sql code demo

- https://www.w3schools.com/sql/sql_select.asp

--select all row and all columns
select *
from contact
;

--select all row and name snd email columns
select name,email
from contact
;

-- filter rows , display on ly selected row, and selected columns
SELECT name, email, phone
FROM contact
WHERE name='sam';

-- select specific rows and specific columns
select name,email
FROM contact
where id <= 2


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
SQlite node js introduction
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

- https://coderslegacy.com/javascript-sqlite3-tutorial-for-beginners-node-js/

- connect to db
- select data
- insert data

#################################################

1. create a repo and clone repo 
or create a project folder ie: sqlite3-demo-app-1

2. from vs.code project command line 
initialize git 
npm init -y 

3. install sqlite3 npm package

[sudo] npm install sqlite3

4. create .gitignore file ie:
  node_modules

5. create folder src/data
 - copy your database file to data folder ie: demodb1.db, dashboard.db

6. create file src/index.js and enter the following code 

//https://coderslegacy.com/javascript-sqlite3-tutorial-for-beginners-node-js/

const sqlite3 = require('sqlite3').verbose();

//windwos or macos or linux 
//let _dbname = `src\\data\\demodb1.db`
let _dbname = "src\\data\\dashboard.db"

//macos, linux os 
//let _dbname = "src/data/demodb1.db"
//let _dbname = "src/data/dashboard.db"

let db = new sqlite3.Database(_dbname, sqlite3.OPEN_READWRITE, (err) => {
  if (err) {
    return console.error(err.message);
  }
  console.log('Connected successfully.');
});

//insert row 
insert_query = "INSERT INTO user(username, password) VALUES(?, ?)"
values = ["usersix", "pwd6"]
//db.run(insert_query, values)

//returns all rows 
db.all("SELECT * FROM user", [], (err, rows) => {
    console.log(rows)
})

//returns first row
//db.get("SELECT * FROM user", [], (err, row) => {
db.get("SELECT * FROM user where username=? and password=?", ["userfour","pwd4"], (err, row) => {
    if (err) {
        throw err; 
    }
    console.log(row);
});


7. run code 
  from root project folder enter 
  node src/index.js

8. update gihub
  -- from cloned  project folder
  -- git add, commit, push
 

